First, we'll go to the CadSoft website at 
http://www.cadsoft.de/download.htm , and download the EAGLE installer.
Conveniently, EAGLE is available for all three major families of operating
systems - Mac, Linux and the other one.

Now, once we've installed Eagle, we can run it, and select 'Run as Freeware'
from the initial startup menu.

Now, we can create a new project, from the main 'Control Panel'. Once we've
created a new project and given it a name, we can create a new schematic
within the new project. Upon doing so, the schematic editor window opens.

As an example, we'll lay out a PCB for a moderately simple Arduino shield
for general purpose I/O, including an alphanumeric LCD display, two 
pushbutton inputs, a DS18B20 1-Wire temperature sensor, a light-dependent 
resistor, a potentimeter input, and two reed relays.

This Arduino shield could be used for many different applications, including
simply learning about controlling several different kinds of common I/O
hardware devices with Arduino, with or without the Aiko framework,
or alternatively, for example, 

As another example of a potentially very interesting application, a shield
like this could be combined with an Arduino and an Ethernet shield, or Xbee
module, to create a distributed network of interface points for a home
automation system, where, for example, the system can be controlled via
input menus at each node, the temperature at each node can be read off, and
the light level at each node can be read off.

With two reed relays on the board, there is plenty of scope for hacking
interfaces to control your lighting, heating or hot water service, just to
name a few possible examples, for home automation.

Now, let's download the file:

http://www.k-ita.de/%7Esl/wp-content/uploads/Arduino-Various.lbr

This is a third-party EAGLE part library file for an Arduino shield, and 
this particular file is described on the web here:

http://www.k-ita.de/~sl/2008/11/10/eagle-library-for-arduino-duemilanovediecimila-shields/

Now, within the EAGLE schematic editor window, select Library --> Use,
and navigate to this newly downloaded file's location, and open it.

We've now added this part library to the library of parts that can be used
in our design.

Now, we can select Add (it takes a second at this point for EAGLE to open
its parts libraries) and select the Arduino-Various library, and the
ARDUINO-USB sub-library within there, and then add an Arduino 'shield'
component to our schematic, by choosing one of the possible variants in the
library. 

Personally I like the ARDUINO-USBLONG_PADS_TEXT, since it has the
pins labelled, and the fat rounded rectangle pads with more copper on them
are convenient to use, especially for DIY board fabrication if you aren't
always too good at drilling the holes perfectly.

Now, let's add some more components to our schematic. With the exception
of the Arduino shield library we've added, these are all included in the
installation.
 
Arduino-Various -> ARDUINO-USB -> ARDUINO-USBLONG_PADS_TEXT
40xx -> 4094 -> 4094N
(The "4094N" is the DIP version of the IC. You may wish to use the 
"4094D"; the surface mount (0.05" SOIC) version of the IC.)
relay -> RR1A
switch-misc -> DT -> DT6
photo-elements -> VT8 -> VT80N1
R-US_ -> R-US_0207/10
pot -> TRIM_US- -> TRIM_US-S64W
pot -> TRIM_US- -> TRIM_US-B25V
pinhead -> PINHD-1X2
pinhead -> PINHD-1x3
pinhead -> PINHD-1X16
SUPPLY1 -> +5V
SUPPLY1 -> GND

Now; we can use the 'Copy' button to duplicate some of these components on
the schematic. Now, we can apply the Copy a few times, so that we ultimately
end up with four resistors, two relays, two pushbuttons and two two-pin 
headers.

The 'copy' button simply duplicates the selected components; in doing so,
it does work a little differently to the conventional copy-and-paste
functionality in most software.

We'll need a fair few ground and +5V rail net symbols - these aren't
physical components, but serve to neaten up the schematic - but we can just
duplicate some more of these as we go along.

Now, we must select "Invoke", and click on the 4094 IC, and add the power
supply rails to the 4094 logic block on the schematic. This is important,
otherwise the power supply rails to the IC will not be connected up when
we go to turn this schematic into a PCB layout. This process is a little
subtle and perhaps a bit annoying, but it is just the way it is with
EAGLE. A similar process, individually "invoking" the individual schematic
blocks within an IC, is necessary, for example, where logic gate ICs are
used, to place the individual logic gates within the IC onto the schematic.

Now that we've got all the parts placed on our schematic, we can go about
arranging the parts into a logical arrangement, using the move commands
(and sometimes flip and rotate as well), and then we can connect up the nets
(wires) between components, using the "Wire" button.

We can also place those round dots at the junctions between intersecting
wires, using the junction button from the toolbar. Strictly speaking, this
isn't necessary, since Eagle will prompt you to join the two nets together,
or not, when you end a wire on another wire. However, placing the net
junction dots on all net junctions looks nice, and allows intersecting wires
to be distinguished from wires which cross but are not connected, and it
also helps to remove ERC (electrical rule check) errors.

When we've drawn up our schematic, and we're happy with it, we can save it
and then select File -> Switch to Board. However, since we don't have a
corresponding board file, we will be prompted for Eagle to create the new
board from the schematic.

When we do this, we're confronted with the physical footprints of our
components laid out in the PCB editor window, connected by an ugly
and intimidating "rat's nest" of point-to-point "airwires".

The goal when laying out the PCB is to convert all these airwires into
copper tracks - and the software guides us through this process, by means
of these airwires, in order to ensure that the finished PCB is guaranteed to
be consistent with the schematic diagram that we started with.

When laying out a PCB design "by hand", without the software and
corresponding schematic to guide us, especially with a complex design, it is
easy to forget particular tracks, and end up with a PCB which does not
function correctly. Going to the trouble of drawing up the schematic in the
software and allowing the software to keep the board consistent with the
schematic, however, ensures that the board, when fabricated, will be
consistent with the original schematic, and therefore, there is a very low
likelihood of the hardware working as expected, assuming that the starting
schematic has been checked.

Not every schematic has a board file associated with it, but every board
file should have a schematic associated with it. The board file and the
schematic file should be in the same directory and have the same filename
(with the appropriate .sch or .brd extension), which lets EAGLE know that
they're linked.









